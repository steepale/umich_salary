norm_path
paste0(norm_path,normal_file)
paste0(norm_path,norm_file)
norm_path < -paste0(norm_path,norm_file)
norm_path <- paste0(norm_path,norm_file)
norm_path
norm_file
norm_name <- str_replace(norm_file,".bam","")
norm_name
norm_name <- str_replace(norm_file,"_Bwa_RG_dedupped_realigned_0.05_sorted.bam","")
norm_name
norm_name <- str_replace(norm_file,"_0.05_sorted.bam","")
norm_name
# Collect sample names
norm_name <- str_replace(norm_file,"_Bwa_RG_dedupped_realigned_0.05_sorted.bam","")
list.files(path = "./tumor", pattern = "*-[1-9]*.bam$", recursive = FALSE,
full.names = FALSE, include.dirs = FALSE)
getwd()
tum_file <- list.files(path = "./tumor", pattern = "*[1-9]*.bam$", recursive = FALSE,
full.names = FALSE, include.dirs = FALSE)
tum_file
# setwd("/Volumes/Frishman_4TB/bams_wgs_2014/subset_bams)
# List of all bam files in the directory
norm_file <- list.files(path = "./normal", pattern = "*.bam$", recursive = FALSE,
full.names = FALSE, include.dirs = FALSE)
norm_file
tum_file <- list.files(path = "./tumor", pattern = "*.bam$", recursive = FALSE,
full.names = FALSE, include.dirs = FALSE)
tum_file
# Remove biological replicates (this file have '_2' in their names)
is.vector(tum_file)
# Remove biological replicates (this file have '_2' in their names)
str_remove(tum_file, "_2")
# Remove biological replicates (this file have '_2' in their names)
tum_file[!grepl("_2", tum_file)]
# Remove biological replicates (this file have '_2' in their names)
tum_file <- tum_file[!grepl("_2", tum_file)]
tum_path <- paste0(getwd(),'/','tumor/')
tum_path <- paste0(tum_path,tum_file)
tum_path
# Collect sample names
sample_name <- str_replace(norm_file,"-0_S*_Bwa_RG_dedupped_realigned_0.05_sorted.bam","")
sample_name
# Collect sample names
sample_name <- str_replace(norm_file,"S*_Bwa_RG_dedupped_realigned_0.05_sorted.bam","")
sample_name
# Collect sample names
sample_name <- str_replace(norm_file,"S[0-9][0-9]_Bwa_RG_dedupped_realigned_0.05_sorted.bam","")
sample_name
# Collect sample names
sample_name <- str_replace(norm_file,"[0-9]_S[0-9][0-9]_Bwa_RG_dedupped_realigned_0.05_sorted.bam","")
sample_name
# Collect sample names
sample_name <- str_replace(norm_file,"-[0-9]_S[0-9][0-9]_Bwa_RG_dedupped_realigned_0.05_sorted.bam","")
sample_name
# Sort all
sort(sample_name)
norm_path <- sort(norm_path)
tum_path <- sort(tum_path)
# Build a df
bam_df <- data.frame(sample_name, norm_path, tum_path)
bam_df
getwd()
?wite.table
?write.table
# Write to file
write.table(bam_df, file = './bam_list.txt', sep ='\t', row.names = FALSE,
col.names = FALSE, quote = FALSE)
sample_name <- paste0("017",sample_name)
sample_name
# Sort all
sample_name <- sort(sample_name)
norm_path <- sort(norm_path)
tum_path <- sort(tum_path)
# Build a df
bam_df <- data.frame(sample_name, norm_path, tum_path)
# Write to file
write.table(bam_df, file = './bam_list.txt', sep ='\t', row.names = FALSE,
col.names = FALSE, quote = FALSE)
session_info()
?session_info()
# Load dependencies
pacs...man <- c("dplyr","tibble","stringr", "data.table", "devtools")
lapply(pacs...man, FUN = function(X) {
do.call("library", list(X))
})
# Incase you need session info
session_info()
# Load dependencies
pacs...man <- c("dplyr","tibble","stringr", "data.table", "devtools")
lapply(pacs...man, FUN = function(X) {
do.call("library", list(X))
})
# date and user variables
date <- format(Sys.Date(), "%Y%m%d")
user <- "steep"
setwd("/Volumes/Frishman_4TB/bams_wgs_2014/subset_bams)
setwd("/Volumes/Frishman_4TB/bams_wgs_2014/subset_bams")
setwd("/Volumes/Frishman_4TB/bams_wgs_2014/subset_bams")
setwd("/Volumes/Frishman_4TB/bams_wgs_2014/subset_bams")
# setwd("/Volumes/Frishman_4TB/bams_wgs_2014/subset_bams")
# List of all bam files in the directory
norm_file <- list.files(path = "./normal", pattern = "*.bam$", recursive = FALSE,
full.names = FALSE, include.dirs = FALSE)
norm_file
tum_file <- list.files(path = "./tumor", pattern = "*.bam$", recursive = FALSE,
full.names = FALSE, include.dirs = FALSE)
# Remove biological replicates (this file have '_2' in their names)
tum_file <- tum_file[!grepl("_2", tum_file)]
# Collect sample names
sample_name <- str_replace(norm_file,"-[0-9]_S[0-9][0-9]_Bwa_RG_dedupped_realigned_0.05_sorted.bam","")
sample_name <- paste0("017",sample_name)
sample_name
# Generate the file paths
norm_path <- '/mnt/subset_bams/normal/'
norm_path <- paste0(norm_path,norm_file)
norm_path
tum_path <- '/mnt/subset_bams/tumor/'
tum_path <- paste0(tum_path,tum_file)
# Sort all
sample_name <- sort(sample_name)
norm_path <- sort(norm_path)
tum_path <- sort(tum_path)
# Build a df
bam_df <- data.frame(sample_name, norm_path, tum_path)
# Write to file
write.table(bam_df, file =  paste0(date,'_bamlist_',user,'.txt'), sep ='\t', row.names = FALSE,
col.names = FALSE, quote = FALSE)
version
# Load dependencies
pacs...man <- c("dplyr","tibble","stringr", "data.table", "devtools")
lapply(pacs...man, FUN = function(X) {
do.call("library", list(X))
})
# date and user variables
date <- format(Sys.Date(), "%Y%m%d")
user <- "steep"
# setwd("/Volumes/Frishman_4TB/bams_wgs_2014")
# List of all bam files in the directory
norm_file <- list.files(path = "./normal", pattern = "*.bam$", recursive = FALSE,
full.names = FALSE, include.dirs = FALSE)
tum_file <- list.files(path = "./tumor", pattern = "*.bam$", recursive = FALSE,
full.names = FALSE, include.dirs = FALSE)
norm_file
# Remove biological replicates (this file have '_2' in their names)
tum_file <- tum_file[!grepl("_2", tum_file)]
# Collect sample names
sample_name <- str_replace(norm_file,"-[0-9]_S[0-9][0-9]_Bwa_RG_dedupped_realigned.bam","")
sample_name
sample_name <- paste0("017",sample_name)
sample_name
norm_file
setwd("/Volumes/Frishman_4TB/bams_wgs_2014")
# setwd("/Volumes/Frishman_4TB/bams_wgs_2014")
# List of all bam files in the directory
norm_file <- list.files(path = "./normal", pattern = "*.bam$", recursive = FALSE,
full.names = FALSE, include.dirs = FALSE)
norm_file
tum_file <- list.files(path = "./tumor", pattern = "*.bam$", recursive = FALSE,
full.names = FALSE, include.dirs = FALSE)
# Remove biological replicates (this file have '_2' in their names)
tum_file <- tum_file[!grepl("_2", tum_file)]
# Collect sample names
sample_name <- str_replace(norm_file,"-[0-9]_S[0-9][0-9]_Bwa_RG_dedupped_realigned.bam","")
sample_name <- paste0("017",sample_name)
sample_name
# Generate the file paths
norm_path <- '/mnt/subset_bams/normal/'
norm_path <- paste0(norm_path,norm_file)
tum_path <- '/mnt/subset_bams/tumor/'
tum_path <- paste0(tum_path,tum_file)
# Sort all
sample_name <- sort(sample_name)
# Sort all
sample_name <- sort(sample_name)
norm_path <- sort(norm_path)
tum_path <- sort(tum_path)
tum_path
# Build a df
bam_df <- data.frame(sample_name, norm_path, tum_path)
# Write to file
write.table(bam_df, file =  paste0(date,'_bamlist_',user,'.txt'), sep ='\t', row.names = FALSE,
col.names = FALSE, quote = FALSE)
format.Date( Sys.Date(), '%Y%m%d' )
library(knitr)
getwd()
install.packages("tidyverse")
#+ data_input
# data: -----------------------------------------------------------------------
file = './recs2015_public_v3.csv'
if ( !file.exists(file) ){
print("yes")
}
if ( !file.exists(file) ){
recs =  readr::read_delim('https://www.eia.gov/consumption/residential/data/2015/csv/recs2015_public_v3.csv',
delim = ',')
readr::write_delim(recs, path = file, delim = ',')
print("yes")
}
#+ data_input
# data: -----------------------------------------------------------------------
file = './recs2015_public_v3.csv'
if ( !file.exists(file) ){
recs =  readr::read_delim('https://www.eia.gov/consumption/residential/data/2015/csv/recs2015_public_v3.csv', delim = ',')
readr::write_delim(recs, path = file, delim = ',')
} else {
recs = readr::read_delim(file, delim = ',')
}
version
if (!require("devtools", quietly = TRUE)) install.packages("devtools")
install.packages("devtools")
?install.packages
if (!require("devtools", quietly = TRUE))
install.packages("devtools")
if (!require("devtools", quietly = TRUE)) install.packages("devtools")
source("https://bioconductor.org/biocLite.R")
devtools::install_github(
"sbg/sevenbridges-r", build_vignettes = TRUE,
repos = BiocInstaller::biocinstallRepos(), dependencies = TRUE)
cat(readLines(fl), sep = '\n')
fl <- system.file("docker/rnaseqGene", "Dockerfile",
package = "sevenbridges")
cat(readLines(fl), sep = '\n')
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("workflows.R")
repos <- c(biocinstallRepos(),
sprintf("%s//bioconductor.org/packages/%s/workflows",
BiocInstaller:::.protocol(),
BiocInstaller::biocVersion()))
repos
workflowInstall <- function(pkg, ...)
{
vers <- getRversion()
if (vers >= "3.6"){
stop(
"With R version 3.6 or greater, install Bioconductor ",
"packages using BiocManager; see https://bioconductor.org/install"
)
}
repos <- c(biocinstallRepos(),
sprintf("%s//bioconductor.org/packages/%s/workflows",
BiocInstaller:::.protocol(),
BiocInstaller::biocVersion()))
install.packages(pkg, repos=repos, ...)
}
?install.packages()
workflowInstall("rnaseqGene")
?workflowInstall
?workflowInstall()
#
#       roi: A genomic feature that will capture the region of interest
#            in from a gtf file. Must be one of:
#                        CDS, exon, five_prime_utr, gene, start_codon,
#                        stop_codon, three_primer_utr, transcript, or intron
#       ann: The path to the annotation file
#       output: The path to the output ROI file
#
####### parse command line arguments ------------------------------------
# loading the library seems a bit cleaner here
library("optparse")
#
#       roi: A genomic feature that will capture the region of interest
#            in from a gtf file. Must be one of:
#                        CDS, exon, five_prime_utr, gene, start_codon,
#                        stop_codon, three_primer_utr, transcript, or intron
#       ann: The path to the annotation file
#       output: The path to the output ROI file
#
####### parse command line arguments ------------------------------------
# loading the library seems a bit cleaner here
library("optparse")
option.list = list(
make_option(c("-r", "--roi"), type = "character", default = exon,
help = "The genomic region of interest. (CDS, exon, five_prime_utr, gene, start_codon, stop_codon, three_primer_utr, transcript, or intron)"),
make_option(c("-a", "--ann"), type = "character", default = NULL,
help = "The input annotation file (e.g. genome.gtf, annotation.bed)"),
make_option(c("-o", "--output"), type = "character", default = NULL,
help = "The path to the output ROI file")
)
# Set the working directory
setwd('/Users/Alec/Documents/umich_salary')
# Load dependencies
pacs...man <- c("dplyr","tibble","magrittr","stringr", "data.table","readr","R.utils","ggplot2")
lapply(pacs...man, FUN = function(X) {
do.call("library", list(X))
})
# Make the 'not in' operator
'%!in%' <- function(x,y) {
!('%in%'(x,y))
}
# Capture the Date
date <- format.Date( Sys.Date(), '%Y%m%d' )
auth <- "steep"
# Load in the sample annotation table
df <- read.table(file = './data/UMsalary.txt', header = TRUE, sep = '\t')
df <- as_tibble(df)
# Remove commas from income
df$APPT_ANNUAL_FTR <- str_replace(df$APPT_ANNUAL_FTR, ',', '') %>% as.numeric()
df <- df[!is.na(df$APPT_ANNUAL_FTR),]
# Calculate annual income
df$APPT_ANNUAL_INCOME <- df$APPT_ANNUAL_FTR / df$APPT_FTR_BASIS * 12
# Create seperate data frame
df_name <- as.data.frame(table(df$NAME))
names(df_name) = c("NAME", "YRS_POST_2015")
# perform left join
df <- left_join(df, df_name, by = "NAME")
# Create a dataframe of first year postdocs
df_pd <- filter(df, TITLE == 'RESEARCH_FELLOW' & YRS_POST_2015 == 1 & YEAR != 2015)
# Refactor some columns
df_pd$DEPT <- as.character(df_pd$DEPT)
df_pd$DEPT <- as.factor(df_pd$DEPT)
# Collect first year postdocs in bioinformatics (vectors and data.frames)
vt_bi_first <- filter(as.data.frame(df_pd), DEPT == 'Comp_Med_and_Bioinformatics') %>% dplyr::select(APPT_ANNUAL_INCOME) %>% unlist()
df_bi_first <- filter(as.data.frame(df_pd), DEPT == 'Comp_Med_and_Bioinformatics')
# Collect first year postdocs (consider removing outliers) across departments
vt_all_first <- as.data.frame(df_pd) %>% dplyr::select(APPT_ANNUAL_INCOME) %>% unlist()
df_all_first <- as.data.frame(df_pd)
# Visualize income distribution with histogram
maze = 'yellow'
blue = 'blue'
# Side-by-side
par(mfrow=c(1,2))
#Classic Histogram
ggplot(data=df_bi_first, aes(df_bi_first$APPT_ANNUAL_INCOME)) +
geom_histogram(aes(),
binwidth = 200,
fill=I(maze),
col=I(blue)) +
ggtitle("Histogram of First-Year Bioinformatics Postdocs at UM") +
xlab("Annual Income (USD)")
# Density Histogram
ggplot(data=df_bi_first, aes(df_bi_first$APPT_ANNUAL_INCOME)) +
geom_histogram(aes(y=..density..),
binwidth = 200,
fill=I(maze),
col=I(blue)) +
geom_density(col=2) +
ggtitle("Histogram of First-Year Bioinformatics Postdocs at UM") +
xlab("Annual Income (USD)")
dev.off()
# Side-by-side
par(mfrow=c(1,2))
#Classic Histogram
ggplot(data=df_bi_first, aes(df_bi_first$APPT_ANNUAL_INCOME)) +
geom_histogram(aes(),
binwidth = 200,
fill=I(maze),
col=I(blue)) +
ggtitle("Histogram of First-Year Bioinformatics Postdocs at UM") +
xlab("Annual Income (USD)")
# Density Histogram
ggplot(data=df_bi_first, aes(df_bi_first$APPT_ANNUAL_INCOME)) +
geom_histogram(aes(y=..density..),
binwidth = 200,
fill=I(maze),
col=I(blue)) +
geom_density(col=2) +
ggtitle("Histogram of First-Year Bioinformatics Postdocs at UM") +
xlab("Annual Income (USD)")
dev.off()
dev.off()
plot(df_bi_first(APPT_ANNUAL_INCOME))
plot(df_bi_first$APPT_ANNUAL_INCOME)
dev.new()
dev.new()
pdf("spec_accum_w_sample.pdf")
plot(df_bi_first$APPT_ANNUAL_INCOME)
graphics.off()
dev.off()
dev.new()
# Side-by-side
par(mfrow=c(1,2))
dev.off()
# Side-by-side
par(mfrow=c(1,2))
#Classic Histogram
ggplot(data=df_bi_first, aes(df_bi_first$APPT_ANNUAL_INCOME)) +
geom_histogram(aes(),
binwidth = 200,
fill=I(maze),
col=I(blue)) +
ggtitle("Histogram of First-Year Bioinformatics Postdocs at UM") +
xlab("Annual Income (USD)")
# Density Histogram
ggplot(data=df_bi_first, aes(df_bi_first$APPT_ANNUAL_INCOME)) +
geom_histogram(aes(y=..density..),
binwidth = 200,
fill=I(maze),
col=I(blue)) +
geom_density(col=2) +
ggtitle("Histogram of First-Year Bioinformatics Postdocs at UM") +
xlab("Annual Income (USD)")
# Side-by-side
par(mfrow=c(1,2))
# Side-by-side
par(mfrow=c(1,2))
# Side-by-side
par(mfrow=c(1,2))
dev.off()
dev.off()
dev.new()
graphics.off()
dev.off()
graphics.off()
graphics.off()
dev.new()
# Side-by-side
par(mfrow=c(1,2))
plot(df_bi_first$APPT_ANNUAL_INCOME)
#Classic Histogram
ggplot(data=df_bi_first, aes(df_bi_first$APPT_ANNUAL_INCOME)) +
geom_histogram(aes(),
binwidth = 200,
fill=I(maze),
col=I(blue)) +
ggtitle("Histogram of First-Year Bioinformatics Postdocs at UM") +
xlab("Annual Income (USD)")
# Load dependencies
pacs...man <- c("dplyr","tibble","magrittr","stringr", "data.table","readr","R.utils","ggplot2","gridExtra")
lapply(pacs...man, FUN = function(X) {
do.call("library", list(X))
})
# Load dependencies
pacs...man <- c("dplyr","tibble","magrittr","stringr", "data.table","readr","R.utils","ggplot2","ggpubr")
lapply(pacs...man, FUN = function(X) {
do.call("library", list(X))
})
# Load the dependencies
#source("https://bioconductor.org/biocLite.R")
#BiocManager::install("R.utils")
install.packages("ggpubr")
# Load dependencies
pacs...man <- c("dplyr","tibble","magrittr","stringr", "data.table","readr","R.utils","ggplot2","ggpubr")
lapply(pacs...man, FUN = function(X) {
do.call("library", list(X))
})
#Classic Histogram
clas_hist_bi <- ggplot(data=df_bi_first, aes(df_bi_first$APPT_ANNUAL_INCOME)) +
geom_histogram(aes(),
binwidth = 200,
fill=I(maze),
col=I(blue)) +
ggtitle("Histogram of First-Year Bioinformatics Postdocs at UM") +
xlab("Annual Income (USD)")
#Classic Histogram
class_hist_bi <- ggplot(data=df_bi_first, aes(df_bi_first$APPT_ANNUAL_INCOME)) +
geom_histogram(aes(),
binwidth = 200,
fill=I(maze),
col=I(blue)) +
ggtitle("Histogram of First-Year Bioinformatics Postdocs at UM") +
xlab("Annual Income (USD)")
# Density Histogram
dens_bi <- ggplot(data=df_bi_first, aes(df_bi_first$APPT_ANNUAL_INCOME)) +
geom_histogram(aes(y=..density..),
binwidth = 200,
fill=I(maze),
col=I(blue)) +
geom_density(col=2) +
ggtitle("Histogram of First-Year Bioinformatics Postdocs at UM") +
xlab("Annual Income (USD)")
#Classic Histogram
hist_bi <- ggplot(data=df_bi_first, aes(df_bi_first$APPT_ANNUAL_INCOME)) +
geom_histogram(aes(),
binwidth = 200,
fill=I(maze),
col=I(blue)) +
ggtitle("Histogram of First-Year Bioinformatics Postdocs at UM") +
xlab("Annual Income (USD)")
hist_bi
dens_bi
ggarrange(hist_bi, dens_bi,
labels = c("A", "B"),
ncol = 1, nrow = 2)
ggarrange(hist_bi, dens_bi,
labels = c("A", "B"),
ncol = 2, nrow = 1)
# Create a vector of Kretzler lab income
kretz_peepz <- c("Kretzler,Matthias","Williams,Amanda","Reamy,Rebecca","Steck,Rebecca","Godfrey,Bradley","Gizinski,Brandi_K","Berthier,Celine_Chantal","Lienczewski,Chrysta_Caryl","Otto,Edgar_Alfred","Martinez,Emily","Eichinger,Felix_Hans_Kamillo","Hamidi,Habib","Ascani,Heather","Saha,Jharna","Hartman,John","Mariani,Laura_Heyns","Hunter,Lois_R","Larkina,Marina","Tomilo,Mark","Rose,Michael","Wys,Noel_Lisa","Dull,Rachel","Eddy,Sean","Roth,Therese","Johnson,Tiffany","Mainieri,Tina","Nair,Viji","Ju,Wenjun","Wang,Yuee","Wright,Zachary_Charles")
filter(df, NAME %in% kretz_peepz)
# Filter the members from the Kretlzer lab
df_kretz<- filter(df, NAME %in% kretz_peepz)
#Classic Histogram
hist_kretz_all <- ggplot(data=df_kretz, aes(df_kretz$APPT_ANNUAL_INCOME)) +
geom_histogram(aes(),
binwidth = 200,
fill=I(maze),
col=I(blue)) +
ggtitle("Histogram of First-Year Bioinformatics Postdocs at UM") +
xlab("Annual Income (USD)")
#Classic Histogram
hist_kretz_all <- ggplot(data=df_kretz, aes(df_kretz$APPT_ANNUAL_INCOME)) +
geom_histogram(aes(),
binwidth = 200,
fill=I(maze),
col=I(blue)) +
ggtitle("Histogram of Income of Kretlzer Lab Employees") +
xlab("Annual Income (USD)")
# Density Histogram
dens_kretz_all <- ggplot(data=df_kretz, aes(df_kretz$APPT_ANNUAL_INCOME)) +
geom_histogram(aes(y=..density..),
binwidth = 200,
fill=I(maze),
col=I(blue)) +
geom_density(col=2) +
ggtitle("Histogram of First-Year Bioinformatics Postdocs at UM") +
xlab("Annual Income (USD)")
# Plot the Kretler lab income
ggarrange(hist_kretz_all, dens_kretz_all,
labels = c("A", "B"),
ncol = 2, nrow = 1)
