})
# Extract the apprpriate GTF file from ensembl
# ftp://ftp.ensembl.org/pub/release-87/gtf/gallus_gallus/Gallus_gallus.Gallus_gallus-5.0.87.gtf.gz
#setwd("/Users/Alec/Documents/Bioinformatics/MDV_Project/p0100_music/data")
gtffile <- "Gallus_gallus.Gallus_gallus-5.0.87.gtf"
# Load the mutations associated with IKZF1 and place them in a GRanges object
df <- read.table("Gallus_gallus.Gallus_gallus-5.0.87.gtf",
sep = '\t', header = FALSE, comment.char="#")
# Too big
set.seed(123)
df <- as_tibble(df)
dim(df)
names(df) <- c('CHROM','SOURCE','FEATURE','START','STOP','SCORE','STRAND','FRAME','ATTRIBUTE')
# Selectneccassarry columns (learn to spell)
df <- df %>% dplyr::select(CHROM,FEATURE,START,STOP,ATTRIBUTE)
df$ATTRIBUTE
?separate
# Split the ATTRIBUTE column
x <- df %>% separate(ATTRIBUTE,
c("GENE_ID", "GENE_VERSION","TX_ID","TX_VERSION", "EXON_NUMBER"),
extra = "drop",
sep = ";")
x
#setwd("/Users/Alec/Documents/Bioinformatics/MDV_Project/p0100_music/data")
gtffile <- "Gallus_gallus.Gallus_gallus-5.0.87.gtf"
# Load the mutations associated with IKZF1 and place them in a GRanges object
df <- read.table("Gallus_gallus.Gallus_gallus-5.0.87.gtf",
sep = '\t', header = FALSE, comment.char="#")
# Too big
set.seed(123)
df <- as_tibble(df)
dim(df)
names(df) <- c('CHROM','SOURCE','FEATURE','START','STOP','SCORE','STRAND','FRAME','ATTRIBUTE')
# Select necessary columns (learn to spell)
df <- df %>% dplyr::select(CHROM,FEATURE,START,STOP,ATTRIBUTE)
# Grab only the exons
df <- filter(df, FEATURE == 'exon')
# Grab only the exons
df <- dplyr::filter(df, FEATURE == 'exon')
rm(ensembldb)
detach("package:ensembldb", unload = TRUE)
# Grab only the exons
df <- dplyr::filter(df, FEATURE == 'exon')
# Split the ATTRIBUTE column
x <- df %>% separate(ATTRIBUTE,
c("GENE_ID", "GENE_VERSION","TX_ID","TX_VERSION", "EXON_NUMBER"),
extra = "drop",
sep = ";")
x
# Remove the 'gene_id ' from the GENE_ID column
df$GENE_ID <- str_replace(df$GENE_ID, 'gene_id ','')
# Split the ATTRIBUTE column
df <- df %>% separate(ATTRIBUTE,
c("GENE_ID", "GENE_VERSION","TX_ID","TX_VERSION", "EXON_NUMBER"),
extra = "drop",
sep = ";")
# Remove the 'gene_id ' from the GENE_ID column
df$GENE_ID <- str_replace(df$GENE_ID, 'gene_id ','')
df
df$GENE_VERSION <- str_replace(df$GENE_VERSION, 'gene_version ','')
df$TX_ID <- str_replace(df$Tx_ID, 'transcript_id ','')
df$TX_VERSION <- str_replace(df$TX_VERSION, 'transcript_version ','')
df$EXON_NUMBER <- str_replace(df$EXON_NUMBER, 'exon_number ','')
df$TX_ID <- str_replace(df$TX_ID, 'transcript_id ','')
df
df$SYMBOL <- mapIds(org.Gg.eg.db, df$GENE_ID, "SYMBOL", "ENSEMBL")
df
dim(df)
df <- df[!duplicated(df),]
dim(df)
today()
as.Date(ugh, format = "%Y%m%d")
as.Date(format = "%Y%m%d")
%Y%m%d
Sys.Date
date()
format(Sys.date(), "%Y")
format(Sys.Date(), "%Y")
format(Sys.Date(), "%Y%M")
format(Sys.Date(), "%Y%M%d")
format(Sys.Date(), "%Y%m%d")
# Get today's date
date <- format(Sys.Date(), "%Y%m%d")
#
write.table(df, file = paste0(date,'_GTFexonsENS_steep.txt'), sep ='\t', header = FALSE)
?write.table
#
write.table(df, file = paste0(date,'_GTFexonsENS_steep.txt'), sep ='\t',
quote = FALSE, row.names = FALSE, col.names = FALSE)
# Get today's date
date <- format(Sys.Date(), "%Y%m%d")
#
write.table(df, file = paste0(date,'_GTFexonsENS_steep.txt'), sep ='\t',
quote = FALSE, row.names = FALSE, col.names = FALSE)
# Select the appropriate columns
df <- df %>% dplyr::select(CHROM,START,STOP,GENE_ID)
# Dedup the df
df <- df[!duplicated(df),]
# Get today's date
date <- format(Sys.Date(), "%Y%m%d")
# Save the df to a file
write.table(df, file = paste0(date,'_GTFexonsENS_steep.txt'), sep ='\t',
quote = FALSE, row.names = FALSE, col.names = FALSE)
# Load dependencies
pacs...man <- c("dplyr","tibble","stringr", "data.table")
# Load dependencies
pacs...man <- c("dplyr","tibble","stringr", "data.table")
lapply(pacs...man, FUN = function(X) {
do.call("library", list(X))
})
setwd("/Volumes/Frishman_4TB/bams_wgs_2014/subset_bams)
# setwd("/Volumes/Frishman_4TB/bams_wgs_2014/subset_bams)
# List all bam files in the directory
list.files(path = ".")
getwd()
setwd("/Volumes/Frishman_4TB/bams_wgs_2014/subset_bams")
getwd()
# setwd("/Volumes/Frishman_4TB/bams_wgs_2014/subset_bams)
# List all bam files in the directory
list.files(path = ".")
# setwd("/Volumes/Frishman_4TB/bams_wgs_2014/subset_bams)
# List all bam files in the directory
list.files(path = ".", full.names = TRUE)
# setwd("/Volumes/Frishman_4TB/bams_wgs_2014/subset_bams)
# List all bam files in the directory
list.files(path = ".", full.names = TRUE, include.dirs = TRUE)
# setwd("/Volumes/Frishman_4TB/bams_wgs_2014/subset_bams)
# List all bam files in the directory
list.files(path = ".", pattern = "*.bam",
full.names = TRUE, include.dirs = TRUE)
# setwd("/Volumes/Frishman_4TB/bams_wgs_2014/subset_bams)
# List all bam files in the directory
list.files(path = ".", pattern = "*.bam", recursive = TRUE,
full.names = TRUE, include.dirs = TRUE)
# setwd("/Volumes/Frishman_4TB/bams_wgs_2014/subset_bams)
# List all bam files in the directory
list.files(path = ".", pattern = ".bam$", recursive = TRUE,
full.names = TRUE, include.dirs = TRUE)
# setwd("/Volumes/Frishman_4TB/bams_wgs_2014/subset_bams)
# List all bam files in the directory
list.files(path = ".", pattern = ".*\.bam$", recursive = TRUE,
full.names = TRUE, include.dirs = TRUE)
source('~/Documents/Bioinformatics/MDV_Project/p0100_music/scripts/create_bam_list.R', echo=TRUE)
# setwd("/Volumes/Frishman_4TB/bams_wgs_2014/subset_bams)
# List all bam files in the directory
list.files(path = ".", pattern = "*\.bam$", recursive = TRUE,
full.names = TRUE, include.dirs = TRUE)
# setwd("/Volumes/Frishman_4TB/bams_wgs_2014/subset_bams)
# List all bam files in the directory
list.files(path = ".", pattern = "*.bam$", recursive = TRUE,
full.names = TRUE, include.dirs = TRUE)
# setwd("/Volumes/Frishman_4TB/bams_wgs_2014/subset_bams)
# List all bam files in the directory
list.files(path = ".", pattern = "*.bam", recursive = TRUE,
full.names = TRUE, include.dirs = TRUE)
$
# setwd("/Volumes/Frishman_4TB/bams_wgs_2014/subset_bams)
# List all bam files in the directory
list.files(path = ".", pattern = "*.bam$", recursive = TRUE,
full.names = TRUE, include.dirs = TRUE)
?list.files
# setwd("/Volumes/Frishman_4TB/bams_wgs_2014/subset_bams)
# List all bam files in the directory
list.files(path = ".", pattern = "*.bam$", recursive = FALSE,
full.names = TRUE, include.dirs = TRUE)
# setwd("/Volumes/Frishman_4TB/bams_wgs_2014/subset_bams)
# List all bam files in the directory
list.files(path = ".", pattern = "*.bam$", recursive = FALSE,
full.names = TRUE, include.dirs = FALSE)
# setwd("/Volumes/Frishman_4TB/bams_wgs_2014/subset_bams)
# List all bam files in the directory
list.files(path = ".", pattern = "*.bam$", recursive = FALSE,
full.names = FALSE, include.dirs = FALSE)
# setwd("/Volumes/Frishman_4TB/bams_wgs_2014/subset_bams)
# List all bam files in the directory
list.files(path = ".", pattern = "*-0*.bam$", recursive = FALSE,
full.names = FALSE, include.dirs = FALSE)
# setwd("/Volumes/Frishman_4TB/bams_wgs_2014/subset_bams)
# List all bam files in the directory
list.files(path = ".", pattern = "*-0*.bam$", recursive = FALSE,
full.names = FALSE, include.dirs = FALSE)
# setwd("/Volumes/Frishman_4TB/bams_wgs_2014/subset_bams)
# List all bam files in the directory
list.files(path = ".", pattern = "*0*.bam$", recursive = FALSE,
full.names = FALSE, include.dirs = FALSE)
# setwd("/Volumes/Frishman_4TB/bams_wgs_2014/subset_bams)
# List all bam files in the directory
list.files(path = ".", pattern = "*/-0*.bam$", recursive = FALSE,
full.names = FALSE, include.dirs = FALSE)
# setwd("/Volumes/Frishman_4TB/bams_wgs_2014/subset_bams)
# List all bam files in the directory
list.files(path = ".", pattern = "*-/0*.bam$", recursive = FALSE,
full.names = FALSE, include.dirs = FALSE)
# setwd("/Volumes/Frishman_4TB/bams_wgs_2014/subset_bams)
# List all bam files in the directory
list.files(path = ".", pattern = "*//-0*.bam$", recursive = FALSE,
full.names = FALSE, include.dirs = FALSE)
# setwd("/Volumes/Frishman_4TB/bams_wgs_2014/subset_bams)
# List all bam files in the directory
list.files(path = ".", pattern = "*///-0*.bam$", recursive = FALSE,
full.names = FALSE, include.dirs = FALSE)
# setwd("/Volumes/Frishman_4TB/bams_wgs_2014/subset_bams)
# List all bam files in the directory
list.files(path = ".", pattern = "*////-0*.bam$", recursive = FALSE,
full.names = FALSE, include.dirs = FALSE)
# setwd("/Volumes/Frishman_4TB/bams_wgs_2014/subset_bams)
# List all bam files in the directory
list.files(path = ".", pattern = "*0*.bam$", recursive = FALSE,
full.names = FALSE, include.dirs = FALSE)
# setwd("/Volumes/Frishman_4TB/bams_wgs_2014/subset_bams)
# List all bam files in the directory
list.files(path = ".", pattern = "*0_S*.bam$", recursive = FALSE,
full.names = FALSE, include.dirs = FALSE)
# setwd("/Volumes/Frishman_4TB/bams_wgs_2014/subset_bams)
# List all normal bam files in the directory
list.files(path = ".", pattern = "./normal/*0*.bam$", recursive = FALSE,
full.names = FALSE, include.dirs = FALSE)
# setwd("/Volumes/Frishman_4TB/bams_wgs_2014/subset_bams)
# List all normal bam files in the directory
list.files(path = "./normal", pattern = "*0*.bam$", recursive = FALSE,
full.names = FALSE, include.dirs = FALSE)
# setwd("/Volumes/Frishman_4TB/bams_wgs_2014/subset_bams)
# List all normal bam files in the directory
norm_file <- list.files(path = "./normal", pattern = "*0*.bam$", recursive = FALSE,
full.names = FALSE, include.dirs = FALSE)
getwd()
# Generate the normal file path
norm_path <- paste0(getwd(),'/',normal)
# Generate the normal file path
norm_path <- paste0(getwd(),'/','normal/')
norm_path
paste0(norm_path,normal_file)
paste0(norm_path,norm_file)
norm_path < -paste0(norm_path,norm_file)
norm_path <- paste0(norm_path,norm_file)
norm_path
norm_file
norm_name <- str_replace(norm_file,".bam","")
norm_name
norm_name <- str_replace(norm_file,"_Bwa_RG_dedupped_realigned_0.05_sorted.bam","")
norm_name
norm_name <- str_replace(norm_file,"_0.05_sorted.bam","")
norm_name
# Collect sample names
norm_name <- str_replace(norm_file,"_Bwa_RG_dedupped_realigned_0.05_sorted.bam","")
list.files(path = "./tumor", pattern = "*-[1-9]*.bam$", recursive = FALSE,
full.names = FALSE, include.dirs = FALSE)
getwd()
tum_file <- list.files(path = "./tumor", pattern = "*[1-9]*.bam$", recursive = FALSE,
full.names = FALSE, include.dirs = FALSE)
tum_file
# setwd("/Volumes/Frishman_4TB/bams_wgs_2014/subset_bams)
# List of all bam files in the directory
norm_file <- list.files(path = "./normal", pattern = "*.bam$", recursive = FALSE,
full.names = FALSE, include.dirs = FALSE)
norm_file
tum_file <- list.files(path = "./tumor", pattern = "*.bam$", recursive = FALSE,
full.names = FALSE, include.dirs = FALSE)
tum_file
# Remove biological replicates (this file have '_2' in their names)
is.vector(tum_file)
# Remove biological replicates (this file have '_2' in their names)
str_remove(tum_file, "_2")
# Remove biological replicates (this file have '_2' in their names)
tum_file[!grepl("_2", tum_file)]
# Remove biological replicates (this file have '_2' in their names)
tum_file <- tum_file[!grepl("_2", tum_file)]
tum_path <- paste0(getwd(),'/','tumor/')
tum_path <- paste0(tum_path,tum_file)
tum_path
# Collect sample names
sample_name <- str_replace(norm_file,"-0_S*_Bwa_RG_dedupped_realigned_0.05_sorted.bam","")
sample_name
# Collect sample names
sample_name <- str_replace(norm_file,"S*_Bwa_RG_dedupped_realigned_0.05_sorted.bam","")
sample_name
# Collect sample names
sample_name <- str_replace(norm_file,"S[0-9][0-9]_Bwa_RG_dedupped_realigned_0.05_sorted.bam","")
sample_name
# Collect sample names
sample_name <- str_replace(norm_file,"[0-9]_S[0-9][0-9]_Bwa_RG_dedupped_realigned_0.05_sorted.bam","")
sample_name
# Collect sample names
sample_name <- str_replace(norm_file,"-[0-9]_S[0-9][0-9]_Bwa_RG_dedupped_realigned_0.05_sorted.bam","")
sample_name
# Sort all
sort(sample_name)
norm_path <- sort(norm_path)
tum_path <- sort(tum_path)
# Build a df
bam_df <- data.frame(sample_name, norm_path, tum_path)
bam_df
getwd()
?wite.table
?write.table
# Write to file
write.table(bam_df, file = './bam_list.txt', sep ='\t', row.names = FALSE,
col.names = FALSE, quote = FALSE)
sample_name <- paste0("017",sample_name)
sample_name
# Sort all
sample_name <- sort(sample_name)
norm_path <- sort(norm_path)
tum_path <- sort(tum_path)
# Build a df
bam_df <- data.frame(sample_name, norm_path, tum_path)
# Write to file
write.table(bam_df, file = './bam_list.txt', sep ='\t', row.names = FALSE,
col.names = FALSE, quote = FALSE)
session_info()
?session_info()
# Load dependencies
pacs...man <- c("dplyr","tibble","stringr", "data.table", "devtools")
lapply(pacs...man, FUN = function(X) {
do.call("library", list(X))
})
# Incase you need session info
session_info()
# Load dependencies
pacs...man <- c("dplyr","tibble","stringr", "data.table", "devtools")
lapply(pacs...man, FUN = function(X) {
do.call("library", list(X))
})
# date and user variables
date <- format(Sys.Date(), "%Y%m%d")
user <- "steep"
setwd("/Volumes/Frishman_4TB/bams_wgs_2014/subset_bams)
setwd("/Volumes/Frishman_4TB/bams_wgs_2014/subset_bams")
setwd("/Volumes/Frishman_4TB/bams_wgs_2014/subset_bams")
setwd("/Volumes/Frishman_4TB/bams_wgs_2014/subset_bams")
# setwd("/Volumes/Frishman_4TB/bams_wgs_2014/subset_bams")
# List of all bam files in the directory
norm_file <- list.files(path = "./normal", pattern = "*.bam$", recursive = FALSE,
full.names = FALSE, include.dirs = FALSE)
norm_file
tum_file <- list.files(path = "./tumor", pattern = "*.bam$", recursive = FALSE,
full.names = FALSE, include.dirs = FALSE)
# Remove biological replicates (this file have '_2' in their names)
tum_file <- tum_file[!grepl("_2", tum_file)]
# Collect sample names
sample_name <- str_replace(norm_file,"-[0-9]_S[0-9][0-9]_Bwa_RG_dedupped_realigned_0.05_sorted.bam","")
sample_name <- paste0("017",sample_name)
sample_name
# Generate the file paths
norm_path <- '/mnt/subset_bams/normal/'
norm_path <- paste0(norm_path,norm_file)
norm_path
tum_path <- '/mnt/subset_bams/tumor/'
tum_path <- paste0(tum_path,tum_file)
# Sort all
sample_name <- sort(sample_name)
norm_path <- sort(norm_path)
tum_path <- sort(tum_path)
# Build a df
bam_df <- data.frame(sample_name, norm_path, tum_path)
# Write to file
write.table(bam_df, file =  paste0(date,'_bamlist_',user,'.txt'), sep ='\t', row.names = FALSE,
col.names = FALSE, quote = FALSE)
version
# Load dependencies
pacs...man <- c("dplyr","tibble","stringr", "data.table", "devtools")
lapply(pacs...man, FUN = function(X) {
do.call("library", list(X))
})
# date and user variables
date <- format(Sys.Date(), "%Y%m%d")
user <- "steep"
# setwd("/Volumes/Frishman_4TB/bams_wgs_2014")
# List of all bam files in the directory
norm_file <- list.files(path = "./normal", pattern = "*.bam$", recursive = FALSE,
full.names = FALSE, include.dirs = FALSE)
tum_file <- list.files(path = "./tumor", pattern = "*.bam$", recursive = FALSE,
full.names = FALSE, include.dirs = FALSE)
norm_file
# Remove biological replicates (this file have '_2' in their names)
tum_file <- tum_file[!grepl("_2", tum_file)]
# Collect sample names
sample_name <- str_replace(norm_file,"-[0-9]_S[0-9][0-9]_Bwa_RG_dedupped_realigned.bam","")
sample_name
sample_name <- paste0("017",sample_name)
sample_name
norm_file
setwd("/Volumes/Frishman_4TB/bams_wgs_2014")
# setwd("/Volumes/Frishman_4TB/bams_wgs_2014")
# List of all bam files in the directory
norm_file <- list.files(path = "./normal", pattern = "*.bam$", recursive = FALSE,
full.names = FALSE, include.dirs = FALSE)
norm_file
tum_file <- list.files(path = "./tumor", pattern = "*.bam$", recursive = FALSE,
full.names = FALSE, include.dirs = FALSE)
# Remove biological replicates (this file have '_2' in their names)
tum_file <- tum_file[!grepl("_2", tum_file)]
# Collect sample names
sample_name <- str_replace(norm_file,"-[0-9]_S[0-9][0-9]_Bwa_RG_dedupped_realigned.bam","")
sample_name <- paste0("017",sample_name)
sample_name
# Generate the file paths
norm_path <- '/mnt/subset_bams/normal/'
norm_path <- paste0(norm_path,norm_file)
tum_path <- '/mnt/subset_bams/tumor/'
tum_path <- paste0(tum_path,tum_file)
# Sort all
sample_name <- sort(sample_name)
# Sort all
sample_name <- sort(sample_name)
norm_path <- sort(norm_path)
tum_path <- sort(tum_path)
tum_path
# Build a df
bam_df <- data.frame(sample_name, norm_path, tum_path)
# Write to file
write.table(bam_df, file =  paste0(date,'_bamlist_',user,'.txt'), sep ='\t', row.names = FALSE,
col.names = FALSE, quote = FALSE)
format.Date( Sys.Date(), '%Y%m%d' )
library(knitr)
getwd()
install.packages("tidyverse")
#+ data_input
# data: -----------------------------------------------------------------------
file = './recs2015_public_v3.csv'
if ( !file.exists(file) ){
print("yes")
}
if ( !file.exists(file) ){
recs =  readr::read_delim('https://www.eia.gov/consumption/residential/data/2015/csv/recs2015_public_v3.csv',
delim = ',')
readr::write_delim(recs, path = file, delim = ',')
print("yes")
}
#+ data_input
# data: -----------------------------------------------------------------------
file = './recs2015_public_v3.csv'
if ( !file.exists(file) ){
recs =  readr::read_delim('https://www.eia.gov/consumption/residential/data/2015/csv/recs2015_public_v3.csv', delim = ',')
readr::write_delim(recs, path = file, delim = ',')
} else {
recs = readr::read_delim(file, delim = ',')
}
version
if (!require("devtools", quietly = TRUE)) install.packages("devtools")
install.packages("devtools")
?install.packages
if (!require("devtools", quietly = TRUE))
install.packages("devtools")
if (!require("devtools", quietly = TRUE)) install.packages("devtools")
source("https://bioconductor.org/biocLite.R")
devtools::install_github(
"sbg/sevenbridges-r", build_vignettes = TRUE,
repos = BiocInstaller::biocinstallRepos(), dependencies = TRUE)
cat(readLines(fl), sep = '\n')
fl <- system.file("docker/rnaseqGene", "Dockerfile",
package = "sevenbridges")
cat(readLines(fl), sep = '\n')
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("workflows.R")
repos <- c(biocinstallRepos(),
sprintf("%s//bioconductor.org/packages/%s/workflows",
BiocInstaller:::.protocol(),
BiocInstaller::biocVersion()))
repos
workflowInstall <- function(pkg, ...)
{
vers <- getRversion()
if (vers >= "3.6"){
stop(
"With R version 3.6 or greater, install Bioconductor ",
"packages using BiocManager; see https://bioconductor.org/install"
)
}
repos <- c(biocinstallRepos(),
sprintf("%s//bioconductor.org/packages/%s/workflows",
BiocInstaller:::.protocol(),
BiocInstaller::biocVersion()))
install.packages(pkg, repos=repos, ...)
}
?install.packages()
workflowInstall("rnaseqGene")
?workflowInstall
?workflowInstall()
#
#       roi: A genomic feature that will capture the region of interest
#            in from a gtf file. Must be one of:
#                        CDS, exon, five_prime_utr, gene, start_codon,
#                        stop_codon, three_primer_utr, transcript, or intron
#       ann: The path to the annotation file
#       output: The path to the output ROI file
#
####### parse command line arguments ------------------------------------
# loading the library seems a bit cleaner here
library("optparse")
#
#       roi: A genomic feature that will capture the region of interest
#            in from a gtf file. Must be one of:
#                        CDS, exon, five_prime_utr, gene, start_codon,
#                        stop_codon, three_primer_utr, transcript, or intron
#       ann: The path to the annotation file
#       output: The path to the output ROI file
#
####### parse command line arguments ------------------------------------
# loading the library seems a bit cleaner here
library("optparse")
option.list = list(
make_option(c("-r", "--roi"), type = "character", default = exon,
help = "The genomic region of interest. (CDS, exon, five_prime_utr, gene, start_codon, stop_codon, three_primer_utr, transcript, or intron)"),
make_option(c("-a", "--ann"), type = "character", default = NULL,
help = "The input annotation file (e.g. genome.gtf, annotation.bed)"),
make_option(c("-o", "--output"), type = "character", default = NULL,
help = "The path to the output ROI file")
)
# Set the working directory
setwd('/Users/Alec/Documents/umich_salary')
